# -*- coding: utf-8 -*-
"""PCOD Detection and Analysis in women.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qrqGOp0MjAPncd5_iPd3QW9u2Lc5dKSy

Importing the dataset
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
url='https://raw.githubusercontent.com/POOJAAA369/pcod-detection/main/pcos%20datasets1.csv'
dataset = pd.read_csv(url)
dataset.head(30)

dataset.shape

dataset.columns

dataset.describe()

dataset.info()

dataset['PCOS/PCOD'].value_counts()

dataset['PCOS DETECTED'].value_counts()

np.mean(dataset['PCOS DETECTED'])

"""# Visualizations"""

plt.figure(figsize=(16,16))
sns.heatmap(dataset.corr(method='spearman'),annot=True,cmap='viridis',alpha=0.8)
plt.tight_layout()

"""## Box plots for numeric attributes"""

plt.figure(figsize=(12,4))
plt.plot(dataset['Height'],c='Orange')
plt.xlabel('Frequency')
plt.ylabel('Height')

plt.figure(figsize=(12,4))
plt.plot(dataset['Weight'],c='Green')
plt.xlabel('Frequency')
plt.ylabel('Weight')

plt.figure(figsize=(12,4))
plt.plot(dataset['Sleeping Hours'],c='skyblue')
plt.xlabel('Frequency')
plt.ylabel('Sleeping Hours')

plt.figure(figsize=(12,4))
plt.plot(dataset['Working Hours'],c='Pink')
plt.xlabel('Frequency')
plt.ylabel('Working Hours')

plt.figure(figsize=(12,4))
plt.plot(dataset['Period Length'],c='Brown')
plt.xlabel('Frequency')
plt.ylabel('Period Length')

"""# Comaprison (PCOS vs Non-PCOS)"""

plt.figure(figsize=(8,5))
sns.set_style('whitegrid')
sns.countplot(x='Cycle',hue='PCOS/PCOD',data=dataset,palette='coolwarm')

plt.figure(figsize=(8,5))
sns.set_style('whitegrid')
sns.countplot(x='Smoke',hue='PCOS/PCOD',data=dataset,palette='coolwarm')

plt.figure(figsize=(8,5))
sns.set_style('whitegrid')
sns.countplot(x='Alcohol',hue='PCOS/PCOD',data=dataset,palette='coolwarm')

plt.figure(figsize=(8,5))
sns.set_style('whitegrid')
sns.countplot(x='Hypertension',hue='PCOS/PCOD',data=dataset,palette='coolwarm')

plt.figure(figsize=(8,5))
sns.set_style('whitegrid')
sns.countplot(x='Junk Food',hue='PCOS/PCOD',data=dataset,palette='coolwarm')

plt.figure(figsize=(8,5))
sns.set_style('whitegrid')
sns.countplot(x='Mood Swings',hue='PCOS/PCOD',data=dataset,palette='coolwarm')

plt.figure(figsize=(8,5))
sns.set_style('whitegrid')
sns.countplot(x='Thyroid',hue='PCOS/PCOD',data=dataset,palette='coolwarm')

plt.figure(figsize=(8,5))
sns.set_style('whitegrid')
sns.countplot(x='Period Flow',hue='PCOS/PCOD',data=dataset,palette='coolwarm')

plt.figure(figsize=(8,5))
sns.set_style('whitegrid')
sns.countplot(x='Unwanted Hair Growth',hue='PCOS/PCOD',data=dataset,palette='coolwarm')

plt.figure(figsize=(8,5))
sns.set_style('whitegrid')
sns.countplot(x='Weight Gain',hue='PCOS/PCOD',data=dataset,palette='coolwarm')

plt.figure(figsize=(8,5))
sns.set_style('whitegrid')
sns.countplot(x='Weight Loss',hue='PCOS/PCOD',data=dataset,palette='coolwarm')

plt.figure(figsize=(8,5))
sns.set_style('whitegrid')
sns.countplot(x='Acne',hue='PCOS/PCOD',data=dataset,palette='coolwarm')

plt.figure(figsize=(8,5))
sns.set_style('whitegrid')
sns.countplot(x='Skin Darkening',hue='PCOS/PCOD',data=dataset,palette='coolwarm')

plt.figure(figsize=(8,5))
sns.set_style('whitegrid')
sns.countplot(x='Centrally Obese',hue='PCOS/PCOD',data=dataset,palette='coolwarm')

plt.figure(figsize=(8,5))
sns.set_style('whitegrid')
sns.countplot(x='PCOS/PCOD',hue='PCOS/PCOD',data=dataset,palette='coolwarm')

columns =['Married','Period Flow','PCOS/PCOD Awareness','PCOS DETECTED']
dataset = dataset.drop(columns,axis=1)

dataset.head()

"""## 1) Logistic Regression Algorithm"""

from sklearn.linear_model import LogisticRegression
from sklearn import metrics
from sklearn.model_selection import train_test_split

x=dataset.drop('PCOS/PCOD',axis=1)
y=dataset['PCOS/PCOD']

X_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=0)
logreg = LogisticRegression()
logreg.fit(X_train, y_train)

LogisticRegression()

y_pred = logreg.predict(x_test)
print('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(x_test, y_test)))

from sklearn.metrics import confusion_matrix

confusion_matrix = confusion_matrix(y_test, y_pred)
print(confusion_matrix)

from sklearn.metrics import classification_report

print(classification_report(y_test, y_pred))

from sklearn.metrics import roc_auc_score
from sklearn.metrics import roc_curve

"""# 2) Random Forest Algorithm"""

# train_test_split

from sklearn.model_selection import train_test_split

X = dataset.drop('PCOS/PCOD',axis=1)
y = dataset['PCOS/PCOD']

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3)
print("Success")

"""## Prediction"""

# train_test_split

from sklearn.model_selection import train_test_split

x = dataset.drop('PCOS/PCOD',axis=1)
y = dataset['PCOS/PCOD']

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.3)
print("Success")

from sklearn.naive_bayes import GaussianNB
from sklearn import metrics

classifier = GaussianNB()
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)

"""##  Accuracy"""

print("Accuracy Score:  ",metrics.accuracy_score(y_test,y_pred))

"""## Confusion Matrix"""

from sklearn.metrics import confusion_matrix, classification_report

print("Confusion Matrix \n\n",confusion_matrix(y_test, y_pred))

"""## Classification Report"""

print(classification_report(y_test,y_pred))

"""# 4) Ada Boost Classifier"""

# train_test_split

from sklearn.model_selection import train_test_split

X = dataset.drop('PCOS/PCOD',axis=1)
y = dataset['PCOS/PCOD']

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3)
print("Success")

from sklearn.ensemble import AdaBoostClassifier
from sklearn.tree import DecisionTreeClassifier

classifier = AdaBoostClassifier(DecisionTreeClassifier(max_depth=1), n_estimators=700)
classifier.fit(X_train, y_train)

logit_roc_auc = roc_auc_score(y_test, logreg.predict(x_test))
fpr, tpr, threshholds = roc_curve(y_test, logreg.predict_proba(x_test)[:,1])
plt.figure()
plt.plot(fpr, tpr, label='Logistic regression (area= %0.2f)' % logit_roc_auc)
plt.plot([0,1, 1.0],'r--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver operating characteristic')
plt.legend(loc="lower right")
plt.savefig('log_ROC')
plt.show()